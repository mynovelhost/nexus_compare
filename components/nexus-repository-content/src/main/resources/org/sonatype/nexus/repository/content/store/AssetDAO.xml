<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Sonatype Nexus (TM) Open Source Version
    Copyright (c) 2008-present Sonatype, Inc.
    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.

    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.

    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
    Eclipse Foundation. All other trademarks are the property of their respective owners.

-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${namespace}">

  <insert id="createSchema">
    --
    -- each format has an asset table which they can extend
    --
    CREATE TABLE IF NOT EXISTS ${format}_asset (
      asset_id        INT GENERATED BY DEFAULT AS IDENTITY,
      repository_id   INT NOT NULL,
      path            VARCHAR NOT NULL,
      kind            VARCHAR NOT NULL,
      component_id    INT,
      asset_blob_id   INT,
      last_downloaded TIMESTAMP WITH TIME ZONE,
      attributes      ${JSON_TYPE} NOT NULL,
      created         TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
      last_updated    TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,

      CONSTRAINT pk_${format}_asset_id PRIMARY KEY (asset_id),
      CONSTRAINT uk_${format}_asset_repository_path UNIQUE (repository_id, path),
      CONSTRAINT fk_${format}_asset_repository_id FOREIGN KEY (repository_id)
         REFERENCES ${format}_content_repository (repository_id),
      CONSTRAINT fk_${format}_asset_component FOREIGN KEY (component_id)
         REFERENCES ${format}_component (component_id),
      CONSTRAINT fk_${format}_asset_blob FOREIGN KEY (asset_blob_id)
         REFERENCES ${format}_asset_blob (asset_blob_id)
    );

    CREATE INDEX IF NOT EXISTS idx_${format}_asset_kind ON ${format}_asset (kind);
    --
  </insert>

  <sql id="assetPathMatch">
    repository_id = #{repositoryId} AND path = #{path}
  </sql>

  <sql id="assetMatch">
    <choose>
      <when test="assetId != null">
        asset_id = #{assetId}
      </when>
      <otherwise>
        <include refid="assetPathMatch"/>
      </otherwise>
    </choose>
  </sql>

  <sql id="componentCoordinateMatch">
    ${format}_component.repository_id = #{repositoryId}
        AND namespace = #{namespace} AND name = #{name} AND version = #{version}
  </sql>

  <resultMap id="assetResult" type="AssetData">
    <association property="component" column="component_id" select="fetchComponent" fetchType="lazy"/>
    <association property="assetBlob" column="asset_blob_id" select="fetchAssetBlob" fetchType="lazy"/>
  </resultMap>

  <select id="fetchComponent" resultType="ComponentData">
    SELECT * FROM ${format}_component WHERE component_id = #{component_id}
  </select>

  <select id="fetchAssetBlob" resultType="AssetBlobData">
    SELECT * FROM ${format}_asset_blob WHERE asset_blob_id = #{asset_blob_id}
  </select>

  <select id="countAssets" resultType="int">
    SELECT COUNT(*) FROM ${format}_asset WHERE repository_id = #{repositoryId};
  </select>

  <select id="browseAssets" resultMap="assetResult">
    SELECT * FROM ${format}_asset WHERE repository_id = #{repositoryId}
    <if test="kind != null">
      AND kind = #{kind}
    </if>
    <if test="continuationToken != null">
      AND asset_id > #{continuationToken}
    </if>
    ORDER BY asset_id LIMIT #{limit};
  </select>

  <select id="browseComponentAssets" resultMap="assetResult" parameterType="ComponentData">
    <choose>
      <when test="componentId != null">
        SELECT * FROM ${format}_asset WHERE component_id = #{componentId};
      </when>
      <otherwise>
        SELECT ${format}_asset.* FROM ${format}_asset INNER JOIN ${format}_component
            USING (component_id) WHERE <include refid="componentCoordinateMatch"/>;
      </otherwise>
    </choose>
  </select>

  <insert id="createAsset" useGeneratedKeys="true" keyProperty="assetId" parameterType="AssetData">
    INSERT INTO ${format}_asset (repository_id, path, kind, component_id, asset_blob_id, last_downloaded, attributes)
        VALUES (#{repositoryId}, #{path}, #{kind}, #{componentId}, #{assetBlobId}, #{lastDownloaded}, #{attributes});
  </insert>

  <select id="readAsset" resultMap="assetResult">
    SELECT * FROM ${format}_asset WHERE <include refid="assetPathMatch"/>;
  </select>

  <update id="updateAssetKind" parameterType="AssetData">
    UPDATE ${format}_asset SET kind = #{kind}, last_updated = CURRENT_TIMESTAMP
        WHERE <include refid="assetMatch"/> AND kind != #{kind};
  </update>

  <update id="updateAssetAttributes" parameterType="AssetData">
    UPDATE ${format}_asset SET attributes = #{attributes}, last_updated = CURRENT_TIMESTAMP
        WHERE <include refid="assetMatch"/> AND attributes != #{attributes};
  </update>

  <update id="updateAssetBlobLink" parameterType="AssetData">
    UPDATE ${format}_asset SET asset_blob_id = #{assetBlobId}, last_updated = CURRENT_TIMESTAMP
        WHERE <include refid="assetMatch"/> AND asset_blob_id IS DISTINCT FROM #{assetBlobId};
  </update>

  <update id="markAsDownloaded" parameterType="AssetData">
    UPDATE ${format}_asset SET last_downloaded = CURRENT_TIMESTAMP, last_updated = CURRENT_TIMESTAMP
        WHERE <include refid="assetMatch"/>;
  </update>

  <delete id="deleteAsset" parameterType="AssetData">
    DELETE FROM ${format}_asset WHERE <include refid="assetMatch"/>;
  </delete>

  <delete id="deletePath">
    DELETE FROM ${format}_asset WHERE <include refid="assetPathMatch"/>;
  </delete>

  <delete id="deleteAssets">
    DELETE FROM ${format}_asset WHERE
        repository_id = #{repositoryId}
        <if test="limit gt 0"> LIMIT #{limit}</if>;
  </delete>

  <delete id="deleteAssets" databaseId="PostgreSQL">
    DELETE FROM ${format}_asset WHERE
        <if test="limit gt 0"> asset_id IN (SELECT asset_id FROM ${format}_asset WHERE </if>
        repository_id = #{repositoryId}
        <if test="limit gt 0"> LIMIT #{limit})</if>;
  </delete>

  <delete id="purgeNotRecentlyDownloaded">
    DELETE FROM ${format}_asset WHERE
        repository_id = #{repositoryId}
        AND component_id IS NULL
        AND last_downloaded &lt;= CURRENT_TIMESTAMP - CAST(#{daysAgo} AS INT) * INTERVAL '1' DAY
        <if test="limit gt 0"> LIMIT #{limit}</if>;
  </delete>

  <delete id="purgeNotRecentlyDownloaded" databaseId="PostgreSQL">
    DELETE FROM ${format}_asset WHERE
        <if test="limit gt 0"> asset_id IN (SELECT asset_id FROM ${format}_asset WHERE </if>
        repository_id = #{repositoryId}
        AND component_id IS NULL
        AND last_downloaded &lt;= CURRENT_TIMESTAMP - CAST(#{daysAgo} AS INT) * INTERVAL '1' DAY
        <if test="limit gt 0"> LIMIT #{limit})</if>;
  </delete>

</mapper>
