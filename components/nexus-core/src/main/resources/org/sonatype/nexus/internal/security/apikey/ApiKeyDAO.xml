<?xml version="1.0" encoding="UTF-8" ?>
<!--

    Sonatype Nexus (TM) Open Source Version
    Copyright (c) 2008-present Sonatype, Inc.
    All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.

    This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
    which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.

    Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. "Sonatype" and "Sonatype Nexus" are trademarks
    of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
    Eclipse Foundation. All other trademarks are the property of their respective owners.

-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.sonatype.nexus.internal.security.apikey.ApiKeyDAO">

  <insert id="createSchema">
    CREATE TABLE IF NOT EXISTS api_key (
      primary_principal VARCHAR(200)   NOT NULL,
      domain            VARCHAR(200)   NOT NULL,
      token             VARCHAR(200)   NOT NULL,
      principals        ${BINARY_TYPE} NOT NULL,

      <!--
      Optimization: put the primary principal before the domain in the primary key,
      so the PK index can be re-used when querying for a principal over all domains
      -->
      CONSTRAINT pk_api_key_primaryprincipal_domain PRIMARY KEY (primary_principal, domain),
      CONSTRAINT uk_api_key_domain_token UNIQUE (domain, token)
    )
  </insert>

  <select id="browsePrincipals" resultType="org.apache.shiro.subject.PrincipalCollection">
    SELECT principals FROM api_key;
  </select>

  <select id="findApiKey" resultType="ApiKeyToken">
    SELECT token FROM api_key
        WHERE primary_principal = #{primaryPrincipal, typeHandler=EncryptedStringTypeHandler}
        AND domain = #{domain};
  </select>

  <select id="findPrincipals" resultType="org.apache.shiro.subject.PrincipalCollection">
    SELECT principals FROM api_key WHERE domain = #{domain} AND token = #{token};
  </select>

  <insert id="save" parameterType="ApiKeyData">
    MERGE INTO api_key (primary_principal, domain, token, principals)
        VALUES (#{primaryPrincipal, typeHandler=EncryptedStringTypeHandler},
                #{domain}, #{token}, #{principals});
  </insert>

  <insert id="save" parameterType="ApiKeyData" databaseId="PostgreSQL">
    INSERT INTO api_key (primary_principal, domain, token, principals)
        VALUES (#{primaryPrincipal, typeHandler=EncryptedStringTypeHandler},
                #{domain}, #{token}, #{principals})
    ON CONFLICT (primary_principal, domain) DO UPDATE SET
        token = #{token}, principals = #{principals};
  </insert>

  <delete id="deleteDomainKey">
    DELETE FROM api_key
        WHERE primary_principal = #{primaryPrincipal, typeHandler=EncryptedStringTypeHandler}
        AND domain = #{domain};
  </delete>

  <delete id="deleteKeys">
    DELETE FROM api_key
        WHERE primary_principal = #{primaryPrincipal, typeHandler=EncryptedStringTypeHandler};
  </delete>

  <delete id="deleteAllKeys">
    DELETE FROM api_key;
  </delete>

</mapper>
