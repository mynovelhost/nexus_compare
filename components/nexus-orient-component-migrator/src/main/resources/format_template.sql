--------------------------------------------------------------------------------
-- WARNING existing content will be removed! (we don't attempt to merge it)
--------------------------------------------------------------------------------

DROP INDEX IF EXISTS idx_maven_browse_node_repository_id_parent_id;
DROP INDEX IF EXISTS idx_maven_browse_node_repository_id_path;
DROP TABLE IF EXISTS ${format}_browse_node;
DROP TABLE IF EXISTS ${format}_asset;
DROP TABLE IF EXISTS ${format}_asset_blob;
DROP TABLE IF EXISTS ${format}_component;
DROP TABLE IF EXISTS ${format}_content_repository;

--------------------------------------------------------------------------------
-- copy of the content schemas taken from NXRM's DAO XML files
--------------------------------------------------------------------------------

CREATE TABLE ${format}_content_repository (
  repository_id        INT GENERATED BY DEFAULT AS IDENTITY,
  config_repository_id UUID NOT NULL,
  attributes           JSON NOT NULL,
  created              TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  last_updated         TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

  CONSTRAINT pk_${format}_content_repository_id PRIMARY KEY (repository_id),
  CONSTRAINT uk_${format}_config_repository_id UNIQUE (config_repository_id)
);

CREATE TABLE ${format}_component (
  component_id  INT GENERATED BY DEFAULT AS IDENTITY,
  repository_id INT NOT NULL,
  namespace     VARCHAR NOT NULL,
  name          VARCHAR NOT NULL,
  version       VARCHAR NOT NULL,
  attributes    JSON NOT NULL,
  created       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  last_updated  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

  CONSTRAINT pk_${format}_component_id PRIMARY KEY (component_id),
  CONSTRAINT uk_${format}_component_coordinate UNIQUE (repository_id, namespace, name, version),
  CONSTRAINT fk_${format}_component_repository_id FOREIGN KEY (repository_id)
     REFERENCES ${format}_content_repository (repository_id)
);

CREATE TABLE ${format}_asset_blob (
  asset_blob_id INT GENERATED BY DEFAULT AS IDENTITY,
  blob_ref      VARCHAR NOT NULL,
  blob_size     BIGINT NOT NULL,
  content_type  VARCHAR NOT NULL,
  blob_created  TIMESTAMP NOT NULL,
  created_by    VARCHAR,
  created_by_ip VARCHAR,

  CONSTRAINT pk_${format}_asset_blob_id PRIMARY KEY (asset_blob_id),
  CONSTRAINT uk_${format}_asset_blob_ref UNIQUE (blob_ref)
);

CREATE TABLE ${format}_asset (
  asset_id        INT GENERATED BY DEFAULT AS IDENTITY,
  repository_id   INT NOT NULL,
  path            VARCHAR NOT NULL,
  component_id    INT,
  asset_blob_id   INT,
  last_downloaded TIMESTAMP,
  attributes      JSON NOT NULL,
  created         TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  last_updated    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,

  CONSTRAINT pk_${format}_asset_id PRIMARY KEY (asset_id),
  CONSTRAINT uk_${format}_asset_repository_path UNIQUE (repository_id, path),
  CONSTRAINT fk_${format}_asset_repository_id FOREIGN KEY (repository_id)
     REFERENCES ${format}_content_repository (repository_id),
  CONSTRAINT fk_${format}_asset_component FOREIGN KEY (component_id)
     REFERENCES ${format}_component (component_id),
  CONSTRAINT fk_${format}_asset_blob FOREIGN KEY (asset_blob_id)
     REFERENCES ${format}_asset_blob (asset_blob_id)
);

CREATE TABLE ${format}_browse_node (
    browse_node_id  INT GENERATED BY DEFAULT AS IDENTITY,
    repository_id   INT NOT NULL,
    format          VARCHAR NOT NULL,
    path            VARCHAR NOT NULL,
    name            VARCHAR NOT NULL,
    parent_id       INT NULL,
    component_id    INT NULL,
    asset_id        INT NULL,

    CONSTRAINT pk_${format}_browse_node_id PRIMARY KEY (browse_node_id),
    CONSTRAINT uk_${format}_browse_node_asset UNIQUE (asset_id),
    CONSTRAINT uk_${format}_browse_node_component UNIQUE (component_id),

    CONSTRAINT fk_${format}_browse_node_component_id FOREIGN KEY (component_id)
         REFERENCES ${format}_component (component_id),
    CONSTRAINT fk_${format}_browse_node_asset_id FOREIGN KEY (asset_id)
         REFERENCES ${format}_asset (asset_id),
    CONSTRAINT fk_${format}_browse_node_parent_id FOREIGN KEY (parent_id)
         REFERENCES ${format}_browse_node (browse_node_id)
);

create index idx_maven_browse_node_repository_id_parent_id on maven_browse_node(repository_id, parent_id);
create index idx_maven_browse_node_repository_id_path on maven_browse_node(repository_id, path);
